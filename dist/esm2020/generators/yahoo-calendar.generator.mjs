import { BaseCalendarGenerator, MS_IN_MINUTES } from './base-calendar.generator';
export const YAHOO_URL = 'http://calendar.yahoo.com/?v=60&view=d&type=20';
export class YahooCalendarGenerator extends BaseCalendarGenerator {
    constructor(event) {
        super(event);
        this.event = event;
    }
    getYahooEventDuration() {
        const eventDuration = this.event.end ?
            ((this.event.end.getTime() - this.event.start.getTime()) / MS_IN_MINUTES) :
            this.event.duration;
        // Yahoo dates are crazy, we need to convert the duration from minutes to hh:mm
        const yahooHourDuration = eventDuration < 600 ?
            `0${Math.floor((eventDuration / 60))}` :
            `${Math.floor((eventDuration / 60))}`;
        const yahooMinuteDuration = eventDuration % 60 < 10 ?
            `0${eventDuration % 60}` :
            `${eventDuration % 60}`;
        return yahooHourDuration + yahooMinuteDuration;
    }
    get href() {
        const chunk = encodeURI(`${YAHOO_URL}&st=${this.startTime || ''}&dur=${(this.getYahooEventDuration() || '')}&in_loc=${(this.event.address || '')}&url=${(this.event.url || '')}`);
        return chunk
            + `&title=${encodeURIComponent(this.event.title || '')}`
            + `&desc=${encodeURIComponent(this.formatDescriptionForOnlineCalendar(this.event.description || '') || '')}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWFob28tY2FsZW5kYXIuZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2dlbmVyYXRvcnMveWFob28tY2FsZW5kYXIuZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxhQUFhLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVqRixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsZ0RBQWdELENBQUM7QUFFMUUsTUFBTSxPQUFPLHNCQUF1QixTQUFRLHFCQUFxQjtJQUU3RCxZQUFzQixLQUFxQjtRQUN2QyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFESyxVQUFLLEdBQUwsS0FBSyxDQUFnQjtJQUUzQyxDQUFDO0lBRU8scUJBQXFCO1FBQ3pCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUMzRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQztRQUV4QiwrRUFBK0U7UUFDL0UsTUFBTSxpQkFBaUIsR0FBRyxhQUFhLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDM0MsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3hDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFMUMsTUFBTSxtQkFBbUIsR0FBRyxhQUFhLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1lBQ2pELElBQUksYUFBYSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDMUIsR0FBRyxhQUFhLEdBQUcsRUFBRSxFQUFFLENBQUM7UUFFNUIsT0FBTyxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQztJQUNuRCxDQUFDO0lBRUQsSUFBVyxJQUFJO1FBQ1gsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUNuQixHQUFHLFNBQVMsT0FBTyxJQUFJLENBQUMsU0FBUyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUMzSixDQUFDO1FBQ0YsT0FBTyxLQUFLO2NBQ04sVUFBVSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsRUFBRTtjQUN0RCxTQUFTLGtCQUFrQixDQUFDLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ3JILENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDYWxlbmRhckV2ZW50IH0gZnJvbSAnLi4vbW9kZWwvY2FsZW5kYXItZXZlbnQubW9kZWwnO1xyXG5pbXBvcnQgeyBCYXNlQ2FsZW5kYXJHZW5lcmF0b3IsIE1TX0lOX01JTlVURVMgfSBmcm9tICcuL2Jhc2UtY2FsZW5kYXIuZ2VuZXJhdG9yJztcclxuXHJcbmV4cG9ydCBjb25zdCBZQUhPT19VUkwgPSAnaHR0cDovL2NhbGVuZGFyLnlhaG9vLmNvbS8/dj02MCZ2aWV3PWQmdHlwZT0yMCc7XHJcblxyXG5leHBvcnQgY2xhc3MgWWFob29DYWxlbmRhckdlbmVyYXRvciBleHRlbmRzIEJhc2VDYWxlbmRhckdlbmVyYXRvciB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGV2ZW50OiBJQ2FsZW5kYXJFdmVudCkge1xyXG4gICAgICAgIHN1cGVyKGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFlhaG9vRXZlbnREdXJhdGlvbigpIHtcclxuICAgICAgICBjb25zdCBldmVudER1cmF0aW9uID0gdGhpcy5ldmVudC5lbmQgP1xyXG4gICAgICAgICAgICAoKHRoaXMuZXZlbnQuZW5kLmdldFRpbWUoKSAtIHRoaXMuZXZlbnQuc3RhcnQuZ2V0VGltZSgpKSAvIE1TX0lOX01JTlVURVMpIDpcclxuICAgICAgICAgICAgdGhpcy5ldmVudC5kdXJhdGlvbjtcclxuXHJcbiAgICAgICAgLy8gWWFob28gZGF0ZXMgYXJlIGNyYXp5LCB3ZSBuZWVkIHRvIGNvbnZlcnQgdGhlIGR1cmF0aW9uIGZyb20gbWludXRlcyB0byBoaDptbVxyXG4gICAgICAgIGNvbnN0IHlhaG9vSG91ckR1cmF0aW9uID0gZXZlbnREdXJhdGlvbiA8IDYwMCA/XHJcbiAgICAgICAgICAgIGAwJHtNYXRoLmZsb29yKChldmVudER1cmF0aW9uIC8gNjApKX1gIDpcclxuICAgICAgICAgICAgYCR7TWF0aC5mbG9vcigoZXZlbnREdXJhdGlvbiAvIDYwKSl9YDtcclxuXHJcbiAgICAgICAgY29uc3QgeWFob29NaW51dGVEdXJhdGlvbiA9IGV2ZW50RHVyYXRpb24gJSA2MCA8IDEwID9cclxuICAgICAgICAgICAgYDAke2V2ZW50RHVyYXRpb24gJSA2MH1gIDpcclxuICAgICAgICAgICAgYCR7ZXZlbnREdXJhdGlvbiAlIDYwfWA7XHJcblxyXG4gICAgICAgIHJldHVybiB5YWhvb0hvdXJEdXJhdGlvbiArIHlhaG9vTWludXRlRHVyYXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBocmVmKCk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgY2h1bmsgPSBlbmNvZGVVUkkoXHJcbiAgICAgICAgICAgIGAke1lBSE9PX1VSTH0mc3Q9JHt0aGlzLnN0YXJ0VGltZSB8fCAnJ30mZHVyPSR7KHRoaXMuZ2V0WWFob29FdmVudER1cmF0aW9uKCkgfHwgJycpfSZpbl9sb2M9JHsodGhpcy5ldmVudC5hZGRyZXNzIHx8ICcnKX0mdXJsPSR7KHRoaXMuZXZlbnQudXJsIHx8ICcnKX1gLFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIGNodW5rXHJcbiAgICAgICAgICAgICsgYCZ0aXRsZT0ke2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLmV2ZW50LnRpdGxlIHx8ICcnKX1gXHJcbiAgICAgICAgICAgICsgYCZkZXNjPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuZm9ybWF0RGVzY3JpcHRpb25Gb3JPbmxpbmVDYWxlbmRhcih0aGlzLmV2ZW50LmRlc2NyaXB0aW9uIHx8ICcnKSB8fCAnJyl9YDtcclxuICAgIH1cclxufVxyXG4iXX0=